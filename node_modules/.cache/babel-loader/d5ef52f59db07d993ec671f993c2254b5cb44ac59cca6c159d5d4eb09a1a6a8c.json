{"ast":null,"code":"import _slicedToArray from\"/Users/damienlegg/Downloads/react-lights-out/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from\"react\";import Cell from\"./Cell\";import\"./Board.css\";/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/function Board(_ref){var nrows=_ref.nrows,ncols=_ref.ncols,chanceLightStartsOn=_ref.chanceLightStartsOn;var _useState=useState(createBoard()),_useState2=_slicedToArray(_useState,2),board=_useState2[0],setBoard=_useState2[1];/** create a board nrows high/ncols wide, each cell randomly lit or unlit */function createBoard(){var initialBoard=[];// TODO: create array-of-arrays of true/false values\nreturn initialBoard;}function hasWon(){// TODO: check the board in state to determine whether the player has won.\n}function flipCellsAround(coord){setBoard(function(oldBoard){var _coord$split$map=coord.split(\"-\").map(Number),_coord$split$map2=_slicedToArray(_coord$split$map,2),y=_coord$split$map2[0],x=_coord$split$map2[1];var flipCell=function flipCell(y,x,boardCopy){// if this coord is actually on board, flip it\nif(x>=0&&x<ncols&&y>=0&&y<nrows){boardCopy[y][x]=!boardCopy[y][x];}};// TODO: Make a (deep) copy of the oldBoard\n// TODO: in the copy, flip this cell and the cells around it\n// TODO: return the copy\n});}// if the game is won, just show a winning msg & render nothing else\n// TODO\n// make table board\n// TODO\n}export default Board;","map":{"version":3,"names":["React","useState","Cell","Board","_ref","nrows","ncols","chanceLightStartsOn","_useState","createBoard","_useState2","_slicedToArray","board","setBoard","initialBoard","hasWon","flipCellsAround","coord","oldBoard","_coord$split$map","split","map","Number","_coord$split$map2","y","x","flipCell","boardCopy"],"sources":["/Users/damienlegg/Downloads/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n}\n\nexport default Board;\n"],"mappings":"kIAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,IAAI,KAAM,QAAQ,CACzB,MAAO,aAAa,CAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAEA,QAAS,CAAAC,KAAKA,CAAAC,IAAA,CAAwC,IAArC,CAAAC,KAAK,CAAAD,IAAA,CAALC,KAAK,CAAEC,KAAK,CAAAF,IAAA,CAALE,KAAK,CAAEC,mBAAmB,CAAAH,IAAA,CAAnBG,mBAAmB,CAChD,IAAAC,SAAA,CAA0BP,QAAQ,CAACQ,WAAW,CAAC,CAAC,CAAC,CAAAC,UAAA,CAAAC,cAAA,CAAAH,SAAA,IAA1CI,KAAK,CAAAF,UAAA,IAAEG,QAAQ,CAAAH,UAAA,IAEtB,4EACA,QAAS,CAAAD,WAAWA,CAAA,CAAG,CACrB,GAAI,CAAAK,YAAY,CAAG,EAAE,CACrB;AACA,MAAO,CAAAA,YAAY,CACrB,CAEA,QAAS,CAAAC,MAAMA,CAAA,CAAG,CAChB;AAAA,CAGF,QAAS,CAAAC,eAAeA,CAACC,KAAK,CAAE,CAC9BJ,QAAQ,CAAC,SAAAK,QAAQ,CAAI,CACnB,IAAAC,gBAAA,CAAeF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC,CAAAC,iBAAA,CAAAZ,cAAA,CAAAQ,gBAAA,IAApCK,CAAC,CAAAD,iBAAA,IAAEE,CAAC,CAAAF,iBAAA,IAEX,GAAM,CAAAG,QAAQ,CAAG,QAAX,CAAAA,QAAQA,CAAIF,CAAC,CAAEC,CAAC,CAAEE,SAAS,CAAK,CACpC;AAEA,GAAIF,CAAC,EAAI,CAAC,EAAIA,CAAC,CAAGnB,KAAK,EAAIkB,CAAC,EAAI,CAAC,EAAIA,CAAC,CAAGnB,KAAK,CAAE,CAC9CsB,SAAS,CAACH,CAAC,CAAC,CAACC,CAAC,CAAC,CAAG,CAACE,SAAS,CAACH,CAAC,CAAC,CAACC,CAAC,CAAC,CACpC,CACF,CAAC,CAED;AAEA;AAEA;AACF,CAAC,CAAC,CACJ,CAEA;AAEA;AAEA;AAEA;AACF,CAEA,cAAe,CAAAtB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}