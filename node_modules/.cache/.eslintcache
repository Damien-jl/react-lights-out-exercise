[{"/Users/damienlegg/Downloads/react-lights-out/src/index.js":"1","/Users/damienlegg/Downloads/react-lights-out/src/App.js":"2","/Users/damienlegg/Downloads/react-lights-out/src/reportWebVitals.js":"3","/Users/damienlegg/Downloads/react-lights-out/src/Board.js":"4","/Users/damienlegg/Downloads/react-lights-out/src/Cell.js":"5"},{"size":534,"mtime":1666889992000,"results":"6","hashOfConfig":"7"},{"size":247,"mtime":1666889992000,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1666889992000,"results":"9","hashOfConfig":"7"},{"size":1751,"mtime":1666889992000,"results":"10","hashOfConfig":"7"},{"size":539,"mtime":1666889992000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"apd51x",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/damienlegg/Downloads/react-lights-out/src/index.js",[],[],"/Users/damienlegg/Downloads/react-lights-out/src/App.js",[],[],"/Users/damienlegg/Downloads/react-lights-out/src/reportWebVitals.js",[],[],"/Users/damienlegg/Downloads/react-lights-out/src/Board.js",["28","29","30","31","32","33","34","35"],[],"import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n}\n\nexport default Board;\n","/Users/damienlegg/Downloads/react-lights-out/src/Cell.js",[],[],{"ruleId":"36","severity":1,"message":"37","line":1,"column":8,"nodeType":"38","messageId":"39","endLine":1,"endColumn":13},{"ruleId":"36","severity":1,"message":"40","line":2,"column":8,"nodeType":"38","messageId":"39","endLine":2,"endColumn":12},{"ruleId":"36","severity":1,"message":"41","line":31,"column":10,"nodeType":"38","messageId":"39","endLine":31,"endColumn":15},{"ruleId":"36","severity":1,"message":"42","line":40,"column":12,"nodeType":"38","messageId":"39","endLine":40,"endColumn":18},{"ruleId":"36","severity":1,"message":"43","line":44,"column":12,"nodeType":"38","messageId":"39","endLine":44,"endColumn":27},{"ruleId":"36","severity":1,"message":"44","line":46,"column":14,"nodeType":"38","messageId":"39","endLine":46,"endColumn":15},{"ruleId":"36","severity":1,"message":"45","line":46,"column":17,"nodeType":"38","messageId":"39","endLine":46,"endColumn":18},{"ruleId":"36","severity":1,"message":"46","line":48,"column":13,"nodeType":"38","messageId":"39","endLine":48,"endColumn":21},"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'Cell' is defined but never used.","'board' is assigned a value but never used.","'hasWon' is defined but never used.","'flipCellsAround' is defined but never used.","'y' is assigned a value but never used.","'x' is assigned a value but never used.","'flipCell' is assigned a value but never used."]